---
interface Props {
	title: string;
}

const { title } = Astro.props;

import Navbar from '@/components/Navbar.astro';
import '@/styles/globals.css';
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Astro description" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.ico" />
    <link rel="stylesheet" href="../styles/globals.css">
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
	</head>
	<body class="flex flex-col items-center w-full">
    <header>
      <Navbar></Navbar>
    </header>
		<slot />
	</body>

  <script is:inline>
  const getThemePreference = () => {
    if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
      return localStorage.getItem('theme');
    }
    return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
  };
  const isDark = getThemePreference() === 'dark';
  document.documentElement.classList[isDark ? 'add' : 'remove']('dark');

  if (typeof localStorage !== 'undefined') {
    const observer = new MutationObserver(() => {
      const isDark = document.documentElement.classList.contains('dark');
      localStorage.setItem('theme', isDark ? 'dark' : 'light');
    });
    observer.observe(document.documentElement, { attributes: true, attributeFilter: ['class'] });
  }
  </script>
</html>
